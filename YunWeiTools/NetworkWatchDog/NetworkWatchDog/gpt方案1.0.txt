在C#中，可以使用`Ping`类来建立ping的长连接，并通过回调函数来处理ping的结果。以下是一个示例代码：

```csharp
using System;
using System.Net.NetworkInformation;

class Program
{
    static void Main(string[] args)
    {
        string ipAddress = "127.0.0.1"; // 目标IP地址

        Ping ping = new Ping();
        ping.PingCompleted += PingCompletedCallback; // 设置回调函数

        while (true)
        {
            ping.SendAsync(ipAddress, 1000); // 发送ping请求
            Console.WriteLine("Ping sent.");

            // 等待1秒
            System.Threading.Thread.Sleep(1000);
        }
    }

    static void PingCompletedCallback(object sender, PingCompletedEventArgs e)
    {
        if (e.Error != null)
        {
            Console.WriteLine("Ping failed: " + e.Error.Message);
        }
        else if (e.Cancelled)
        {
            Console.WriteLine("Ping cancelled.");
        }
        else
        {
            PingReply reply = e.Reply;
            Console.WriteLine("Ping reply received from " + reply.Address.ToString() +
                " with status " + reply.Status.ToString());
        }
    }
}
```

上述代码中，`PingCompletedCallback`函数是用来处理ping完成的回调函数。在`Main`函数中，我们创建了一个`Ping`对象，并通过`PingCompleted`事件来注册回调函数。然后，通过`SendAsync`方法发送ping请求，并在每次请求之间等待1秒。

当收到ping的回复时，回调函数会被调用，我们可以在回调函数中处理ping的结果。如果发生错误，可以通过`e.Error`属性获取错误信息；如果请求被取消，可以通过`e.Cancelled`属性判断；如果请求成功，可以通过`e.Reply`属性获取回复的详细信息。

注意：上述代码中的目标IP地址是127.0.0.1，即本地回环地址。你可以根据需要修改为其他的IP地址。